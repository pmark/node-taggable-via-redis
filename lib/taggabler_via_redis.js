// Generated by CoffeeScript 1.6.3
(function() {
  var Taggable, redis;

  redis = require("redis");

  Taggable = (function() {
    /*
    constructor
    @param {String} taggable
    @param {uint}  [redisPort] specify custom redis port
    @param {String} [redisHost] specify custom redis host
    */

    function Taggable(taggable, redisPort, redisHost) {
      this.redisClient = redis.createClient(redisPort, redisHost);
      this.taggable = taggable;
      return;
    }

    Taggable.prototype.scopedSet = function(scope, id, tags, callback) {
      var newList,
        _this = this;
      newList = tags;
      this.redisClient.smembers("" + scope + ":" + this.taggable + ":" + id + ":tags", function(err, oldList) {
        var added, removed, toAddCount, toRemoveCount;
        if (err != null) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        oldList = oldList || [];
        added = newList.filter(function(i) {
          return oldList.indexOf(i) === -1;
        });
        removed = oldList.filter(function(i) {
          return newList.indexOf(i) === -1;
        });
        toAddCount = added.length;
        toRemoveCount = removed.length;
        if (toAddCount === 0 && toRemoveCount === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
        added.forEach(function(tag) {
          _this.redisClient.multi().sadd("" + scope + ":" + _this.taggable + ":" + id + ":tags", tag).sadd("" + scope + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + scope + ":" + _this.taggable + ":tags", 1, tag).sadd("" + _this.taggable + ":" + id + ":tags", tag).sadd("" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.taggable + ":tags", 1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            toAddCount--;
            if (toAddCount <= 0 && toRemoveCount <= 0) {
              return typeof callback === "function" ? callback() : void 0;
            }
          });
        });
        removed.forEach(function(tag) {
          _this.redisClient.multi().srem("" + scope + ":" + _this.taggable + ":" + id + ":tags", tag).srem("" + scope + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + scope + ":" + _this.taggable + ":tags", -1, tag).srem("" + _this.taggable + ":" + id + ":tags", tag).srem("" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.taggable + ":tags", -1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            if (replies[2] === "0") {
              _this.redisClient.zrem("" + scope + ":" + _this.taggable + ":tags", tag);
            }
            if (replies[5] === "0") {
              _this.redisClient.zrem("" + _this.taggable + ":tags", tag);
            }
            toRemoveCount--;
            if (toAddCount <= 0 && toRemoveCount <= 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
      });
    };

    Taggable.prototype.unscopedSet = function(id, tags, callback) {
      var newList,
        _this = this;
      newList = tags;
      this.redisClient.smembers("" + this.taggable + ":" + id + ":tags", function(err, oldList) {
        var added, removed, toAddCount, toRemoveCount;
        oldList = oldList || [];
        removed = oldList.filter(function(i) {
          return newList.indexOf(i) === -1;
        });
        added = newList.filter(function(i) {
          return oldList.indexOf(i) === -1;
        });
        toAddCount = added.length;
        toRemoveCount = removed.length;
        if (toAddCount === 0 && toRemoveCount === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
        added.forEach(function(tag) {
          _this.redisClient.multi().sadd("" + _this.taggable + ":" + id + ":tags", tag).sadd("" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.taggable + ":tags", 1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            toAddCount--;
            if (toAddCount === 0 && toRemoveCount === 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
        removed.forEach(function(tag) {
          _this.redisClient.multi().srem("" + _this.taggable + ":" + id + ":tags", tag).srem("" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.taggable + ":tags", -1, tag).exec(function(err, replies) {
            if (replies[2] === "0") {
              _this.redisClient.zrem("" + _this.taggable + ":tags", tag);
            }
            toRemoveCount--;
            if (toAddCount === 0 && toRemoveCount === 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
      });
    };

    Taggable.prototype.set = function(scope, id, tags, callback) {
      if (callback) {
        this.scopedSet(scope, id, tags, callback);
      } else {
        this.unscopedSet(scope, id, tags);
      }
    };

    Taggable.prototype.get = function(scope, id, callback) {
      if (callback) {
        this.redisClient.smembers("" + scope + ":" + this.taggable + ":" + id + ":tags", callback);
      } else {
        this.redisClient.smembers("" + this.taggable + ":" + scope + ":tags", id);
      }
    };

    Taggable.prototype.find = function(scope, tags, callback) {
      var i, sets, tag, _i, _len;
      if (callback == null) {
        callback = tags;
        tags = scope;
        scope = "";
      } else {
        scope = "" + scope + ":";
      }
      sets = [];
      for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
        tag = tags[i];
        sets.push("" + scope + this.taggable + ":tags:" + tag);
      }
      this.redisClient.sinter(tags, callback);
    };

    Taggable.prototype.popular = function(scope, count, callback) {
      var key;
      if (callback) {
        key = "" + scope + ":" + this.taggable + ":tags";
      } else {
        callback = count;
        count = scope;
        key = "" + this.taggable + ":tags";
      }
      this.redisClient.zrevrange(key, 0, count - 1, "WITHSCORES", function(err, reply) {
        var counter, list, tag, type;
        list = [];
        type = "key";
        tag = [];
        counter = reply.length / 2;
        reply.forEach(function(item) {
          if (type === "key") {
            type = "value";
            tag[0] = item;
          } else {
            type = "key";
            tag[1] = parseInt(item);
            list.push(tag);
            tag = [];
            counter--;
          }
          if (counter <= 0) {
            if (typeof callback === "function") {
              callback(list);
            }
          }
        });
      });
    };

    Taggable.quit = function() {
      return this.redisClient.quit();
    };

    return Taggable;

  })();

  module.exports = Taggable;

}).call(this);
