// Generated by CoffeeScript 1.6.3
(function() {
  var DEFAULT, EMPTY_ARRAY, EMPTY_STRING, Taggable, assert, debuglog, redis;

  redis = require("redis");

  debuglog = require("debug")("Taggable");

  assert = require("assert");

  EMPTY_STRING = '';

  EMPTY_ARRAY = [];

  DEFAULT = {
    prefix: "_T"
  };

  Taggable = (function() {
    /*
    constructor
    @param {String} taggable
    @param {uint}  [redisPort] specify custom redis port
    @param {String} [redisHost] specify custom redis host
    */

    function Taggable(options) {
      assert(options, "missing options");
      assert(options.taggable, "missing taggable in options");
      if (options.redisClient) {
        this.redisClient = options.redisClient;
      } else {
        this.redisClient = redis.createClient(options.redisPort, options.redisHost);
      }
      this.taggable = options.taggable;
      this.prefix = options.prefix || DEFAULT.prefix;
      return;
    }

    Taggable.prototype.scopedSet = function(scope, id, tags, callback) {
      var newList,
        _this = this;
      debuglog("[scopedSet] taggable:" + this.taggable + ", scope:" + scope + ", id:" + id + ", tags:" + tags);
      newList = tags;
      this.redisClient.smembers("" + this.prefix + ":" + scope + ":" + this.taggable + ":" + id + ":tags", function(err, oldList) {
        var added, removed, toAddCount, toRemoveCount;
        if (err != null) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        oldList = oldList || [];
        added = newList.filter(function(i) {
          return oldList.indexOf(i) === -1;
        });
        removed = oldList.filter(function(i) {
          return newList.indexOf(i) === -1;
        });
        toAddCount = added.length;
        toRemoveCount = removed.length;
        if (toAddCount === 0 && toRemoveCount === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
        added.forEach(function(tag) {
          _this.redisClient.multi().sadd("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":" + id + ":tags", tag).sadd("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":tags", 1, tag).sadd("" + _this.prefix + ":" + _this.taggable + ":" + id + ":tags", tag).sadd("" + _this.prefix + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + _this.taggable + ":tags", 1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            toAddCount--;
            if (toAddCount <= 0 && toRemoveCount <= 0) {
              return typeof callback === "function" ? callback() : void 0;
            }
          });
        });
        removed.forEach(function(tag) {
          _this.redisClient.multi().srem("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":" + id + ":tags", tag).srem("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":tags", -1, tag).srem("" + _this.prefix + ":" + _this.taggable + ":" + id + ":tags", tag).srem("" + _this.prefix + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + _this.taggable + ":tags", -1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            if (replies[2] === "0") {
              _this.redisClient.zrem("" + _this.prefix + ":" + scope + ":" + _this.taggable + ":tags", tag);
            }
            if (replies[5] === "0") {
              _this.redisClient.zrem("" + _this.prefix + ":" + _this.taggable + ":tags", tag);
            }
            toRemoveCount--;
            if (toAddCount <= 0 && toRemoveCount <= 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
      });
    };

    Taggable.prototype.unscopedSet = function(id, tags, callback) {
      var newList,
        _this = this;
      debuglog("[unscopedSet] taggable:" + this.taggable + ", id:" + id + ", tags:" + tags);
      newList = tags;
      this.redisClient.smembers("" + this.prefix + ":" + this.taggable + ":" + id + ":tags", function(err, oldList) {
        var added, removed, toAddCount, toRemoveCount;
        oldList = oldList || [];
        removed = oldList.filter(function(i) {
          return newList.indexOf(i) === -1;
        });
        added = newList.filter(function(i) {
          return oldList.indexOf(i) === -1;
        });
        toAddCount = added.length;
        toRemoveCount = removed.length;
        if (toAddCount === 0 && toRemoveCount === 0) {
          return typeof callback === "function" ? callback() : void 0;
        }
        added.forEach(function(tag) {
          _this.redisClient.multi().sadd("" + _this.prefix + ":" + _this.taggable + ":" + id + ":tags", tag).sadd("" + _this.prefix + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + _this.taggable + ":tags", 1, tag).exec(function(err, replies) {
            if (err != null) {
              return typeof callback === "function" ? callback(err) : void 0;
            }
            toAddCount--;
            if (toAddCount === 0 && toRemoveCount === 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
        removed.forEach(function(tag) {
          _this.redisClient.multi().srem("" + _this.prefix + ":" + _this.taggable + ":" + id + ":tags", tag).srem("" + _this.prefix + ":" + _this.taggable + ":tags:" + tag, id).zincrby("" + _this.prefix + ":" + _this.taggable + ":tags", -1, tag).exec(function(err, replies) {
            if (replies[2] === "0") {
              _this.redisClient.zrem("" + _this.prefix + ":" + _this.taggable + ":tags", tag);
            }
            toRemoveCount--;
            if (toAddCount === 0 && toRemoveCount === 0) {
              if (typeof callback === "function") {
                callback();
              }
            }
          });
        });
      });
    };

    Taggable.prototype.set = function(id, tags, scope, callback) {
      id = String(id || EMPTY_STRING);
      assert(id, "bad argument id:" + id + ")");
      if ('function' === typeof scope) {
        callback = scope;
        scope = null;
      }
      tags = tags || EMPTY_ARRAY;
      debuglog("[set] taggable:" + this.taggable + ", id:" + id + ", tags:" + tags + ", scope:" + scope + ",");
      if (scope) {
        this.scopedSet(scope, id, tags, callback);
      } else {
        this.unscopedSet(id, tags, callback);
      }
    };

    Taggable.prototype.get = function(ids, scope, callback) {
      var id, proc, _i, _len;
      if ('function' === typeof scope) {
        callback = scope;
        scope = "";
      } else {
        scope = scope != null ? "" + scope + ":" : EMPTY_STRING;
      }
      debuglog("[get] taggable:" + this.taggable + ", ids:" + ids + ", scope:" + scope);
      if (!ids) {
        return typeof callback === "function" ? callback(null, []) : void 0;
      }
      if (!(Array.isArray(ids) && ids.length > 0)) {
        this.redisClient.smembers("" + this.prefix + ":" + scope + this.taggable + ":" + ids + ":tags", callback);
      } else {
        proc = this.redisClient.multi();
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          proc = proc.smembers("" + this.prefix + ":" + scope + this.taggable + ":" + id + ":tags");
        }
        proc.exec(callback);
      }
    };

    Taggable.prototype.find = function(tags, scope, callback) {
      var i, sets, tag, _i, _len;
      if ('function' === typeof scope) {
        callback = scope;
        scope = EMPTY_STRING;
      } else {
        scope = scope != null ? "" + scope + ":" : EMPTY_STRING;
      }
      debuglog("[find] taggable:" + this.taggable + ", tags:" + tags + ", scope:" + scope);
      if (!(tags || EMPTY_STRING).toString()) {
        return callback(null, []);
      }
      sets = [];
      if (Array.isArray(tags)) {
        for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
          tag = tags[i];
          sets.push("" + this.prefix + ":" + scope + this.taggable + ":tags:" + tag);
        }
      } else {
        sets.push("" + this.prefix + ":" + scope + this.taggable + ":tags:" + tags);
      }
      this.redisClient.sinter(sets, callback);
    };

    Taggable.prototype.popular = function(count, scope, callback) {
      var key;
      count = parseInt(count, 10);
      assert(count > 0, "bad argument count:" + count);
      if ('function' === typeof scope) {
        callback = scope;
        scope = EMPTY_STRING;
      } else {
        scope = scope != null ? "" + scope + ":" : EMPTY_STRING;
      }
      debuglog("[popular]  taggable:" + this.taggable + ", count:" + count + ", scope:" + scope);
      key = "" + this.prefix + ":" + scope + this.taggable + ":tags";
      this.redisClient.zrevrange(key, 0, count - 1, "WITHSCORES", function(err, reply) {
        var i, item, results, _i, _len;
        if (err != null) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        results = [];
        for (i = _i = 0, _len = reply.length; _i < _len; i = _i += 2) {
          item = reply[i];
          results.push([reply[i], parseInt(reply[i + 1], 10)]);
        }
        if (typeof callback === "function") {
          callback(null, results);
        }
        return;
      });
    };

    return Taggable;

  })();

  module.exports = Taggable;

}).call(this);
