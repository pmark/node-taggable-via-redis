// Generated by CoffeeScript 1.6.3
/*
# test for taggabler_via_redis
*/


(function() {
  var TAGS_COFFEESCRIPT, TAGS_JQUERY, TAGS_NODE, TAGS_NODE2, TAGS_RAILS, Taggable, USER_27, USER_42, bookTagger, should;

  should = require("should");

  Taggable = require("../taggabler_via_redis");

  bookTagger = new Taggable("person");

  USER_27 = "user:27";

  USER_42 = "user:42";

  TAGS_NODE = "javascript,server,programming".split(",").sort();

  TAGS_JQUERY = "javascript,client,programming".split(",").sort();

  TAGS_RAILS = "ruby,programming".split(",").sort();

  TAGS_COFFEESCRIPT = "javascript,client,server,programming".split(",").sort();

  TAGS_NODE2 = "javascript,server,programming,async,joyent".split(",").sort();

  describe("scope add tests", function() {
    before(function(done) {
      var client, redis;
      redis = require("redis");
      client = redis.createClient();
      client.flushall();
      client.quit();
      return setTimeout(done, 1800);
    });
    return describe("taggabler_via_redis", function() {
      it("should set tags on book 1", function(done) {
        bookTagger.set(USER_27, 1, TAGS_NODE, function(err) {
          should.not.exist(err);
          done();
        });
      });
      it("should get tags for book 1", function(done) {
        bookTagger.get(USER_27, 1, function(err, rsp) {
          should.not.exist(err);
          rsp.sort().should.containDeep(TAGS_NODE);
          done();
        });
      });
      it("should set tags on book 2", function(done) {
        bookTagger.set(USER_27, 2, TAGS_JQUERY, function(err) {
          should.not.exist(err);
          done();
        });
      });
      it("should get tags for book 2", function(done) {
        bookTagger.get(USER_27, 2, function(err, rsp) {
          should.not.exist(err);
          rsp.sort().should.containDeep(TAGS_JQUERY);
          done();
        });
      });
      it("should set tags on book 3", function(done) {
        bookTagger.set(USER_42, 3, TAGS_RAILS, function(err) {
          should.not.exist(err);
          done();
        });
      });
      it("should get tags for book 3", function(done) {
        bookTagger.get(USER_42, 3, function(err, rsp) {
          should.not.exist(err);
          rsp.sort().should.containDeep(TAGS_RAILS);
          done();
        });
      });
      it("should set tags on book 4", function(done) {
        bookTagger.set(USER_42, 4, TAGS_COFFEESCRIPT, function(err) {
          should.not.exist(err);
          done();
        });
      });
      it("should get tags for book 4", function(done) {
        bookTagger.get(USER_42, 4, function(err, rsp) {
          should.not.exist(err);
          rsp.sort().should.containDeep(TAGS_COFFEESCRIPT);
          done();
        });
      });
      it("should get empty array if book has not been tagged", function(done) {
        bookTagger.get(USER_42, 99, function(err, rsp) {
          should.not.exist(err);
          rsp.should.be.empty;
          done();
        });
      });
      it("should find books from tag", function(done) {
        bookTagger.find(USER_42, "client", function(err, rsp) {
          should.not.exist(err);
          rsp.should.containDeep(["4"]);
          done();
        });
      });
      it("should get empty array for non existing tag", function(done) {
        bookTagger.find(USER_42, "maytag", function(err, rsp) {
          should.not.exist(err);
          rsp.should.be.empty;
          done();
        });
      });
      it("should get all items if no tags specified", function(done) {
        bookTagger.find(USER_42, [], function(err, rsp) {
          should.not.exist(err);
          rsp.should.be.empty;
          done();
        });
      });
      it("should get most popular tags from user 42", function(done) {
        bookTagger.popular(USER_42, 10, function(err, rsp) {
          should.not.exist(err);
          rsp[0].should.containDeep(["programming", 2]);
          done();
        });
      });
      return it("should get most popular tags globally", function(done) {
        bookTagger.popular(10, function(err, rsp) {
          should.not.exist(err);
          rsp[0].should.containDeep(["programming", 4]);
          done();
        });
      });
    });
  });

}).call(this);
